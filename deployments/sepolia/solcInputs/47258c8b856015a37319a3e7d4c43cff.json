{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport { AggregatorV3Interface } from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n// 需求：\n// 1. 创建一个收款函数\n// 2. 记录投资人并且查看\n// 3. 在锁定期内，到达目标值，生产商可以提款\n// 4. 在锁定期内，没有到达目标值，投资人在搜定期以后退款\n\ncontract FundMe {\n    // 投资人和投资金额mapping\n    mapping(address => uint256) public funderToAmount;\n    // 最小值 wei, 使用常量定义 USD = 0.05 USD\n    uint256 constant MINIMUN_VALUE = 0.0000001 *  10 ** 18;\n    // 预言机dataFeed转换\n    AggregatorV3Interface public dataFeed;\n    // 准备收集的目标值\n    uint256 constant TARGET = 10 * 10 ** 18;\n\n    address public owner;\n    // 合约部署的时间点\n    uint256 deploymentTimestamp;\n    // 锁定时长\n    uint256 lockTime;\n\n    address erc20Addr;\n\n    bool public getFundSuccess = false;\n\n    constructor(uint256 _lockTime, address _dataFeedAddr) {\n        // sepolia  testnetwork weijia\n        dataFeed = AggregatorV3Interface(_dataFeedAddr);\n        // 合约的部署者\n        owner = msg.sender;\n        // 当前区块的时间 发送合约部署交易所在的区块 当前的时间点\n        deploymentTimestamp = block.timestamp;\n        // 用户输入的入参\n        lockTime = _lockTime;\n    }\n\n    /**\n     * 装饰器: 判断资金是否大于最小值，如果不大于最小值，则返回异常信息提示\n     */\n    modifier requireMinAmount() {\n        require(convertEthToUsd(msg.value) >= MINIMUN_VALUE, \"Sned more ETH\");\n        _;\n    }\n\n    /**\n     * 装饰器: 校验调用者必须为合约拥有者\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"this function can only be called by owner\");\n        _;\n    }\n\n    /**\n     * 收款\n     */\n    function fund() external payable requireMinAmount {\n        // 校验当前fund()方法调用的时间 小于 合约部署的时间加锁定的时间\n        require(block.timestamp < deploymentTimestamp + lockTime, \"window is closed!\");\n        // 赋值投资人的投资金额\n        funderToAmount[msg.sender] = msg.value;\n    }\n\n    /**\n     * Returns the latest answer.\n     */\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        // prettier-ignore\n        (\n        /* uint80 roundID */,\n            int answer,\n        /*uint startedAt*/,\n        /*uint timeStamp*/,\n        /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n\n    /**\n     * 转换eth to usd\n     *\n     * @param ethAmount eth数量\n     */\n    function convertEthToUsd(uint256 ethAmount) internal view returns(uint256) {\n        // ethAmount is wei unit\n        // ETH / USD precision = 10 ** 8\n        // X / ETH precision is 10 ** 18\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return ethAmount * ethPrice / (10 ** 8);\n    }\n\n    /**\n     * 所有权转移\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    /**\n     * 在锁定期内，到达目标值，生产商可以提款，\n     * <P>\n     *\n     */\n    function getFund() external onlyOwner {\n        // 合约的余额的USD价值\n        uint256 contractBalance = convertEthToUsd(address(this).balance);\n        // 判断价值USD是否超过目标值\n        require(contractBalance >= TARGET, \"Target is not reached\");\n        // 校验当前getFund()方法调用的时间 大于等于 合约部署的时间加锁定的时间\n        require(block.timestamp >= deploymentTimestamp + lockTime, \"window is not closed, not getfund!\");\n        // transfer 纯转账 transfer ETH and revert if tx failed\n        // PS: payable(address).transfer(value)\n        // payable(msg.sender).transfer(address(this).balance);\n        // send // 纯转账\n        // bool success = payable(msg.sender).send(address(this).balance);\n        // require(success, \"tx failed\")\n        // call // 官方推荐 转账 + 写数据 带有数据的transfer 和 不带数据的transfer,\n        // call: transfer ETH with data return value of function\n        // payable(msg.sender).call({value : address(this).balance});\n        bool success;\n        (success , ) = payable(msg.sender).call{value : address(this).balance}(\"\");\n        require(success, \"transfer tx failed\");\n        // 如果已经getFund，给flag设置为true\n        getFundSuccess = true;\n    }\n\n    /**\n     * 在锁定期内，没有到达目标值，投资人在搜定期以后退款\n     */\n    function refund() external {\n        // 校验当前getFund()方法调用的时间 大于等于 合约部署的时间加锁定的时间\n        require(block.timestamp >= deploymentTimestamp + lockTime, \"window is not closed, not refund!\");\n        // 判断是否未到达目标值, 如果到达了则不允许退款\n        uint256 contractBalance = convertEthToUsd(address(this).balance);\n        require(contractBalance < TARGET, \"Target is reached\");\n        // 判断当前用户是否已fund，如果没有fund，则返回错误提示\n        uint256 amount = funderToAmount[msg.sender];\n        require(amount != 0, \"there is no fund for you\");\n        // 退款\n        bool success;\n        (success, ) = payable(msg.sender).call{value: amount} (\"\");\n        require(success, \"transfer tx failed\");\n        // 把当前用户金额设置为o\n        funderToAmount[msg.sender] = 0;\n    }\n\n    function setErc20Addr(address _erc20Addr) public onlyOwner {\n        erc20Addr = _erc20Addr;\n    }\n\n    function setFunderToAmount(address funder, uint256 amountToUpdate) external {\n        require(msg.sender == erc20Addr, \"you do not have premission to call this function\");\n        funderToAmount[funder] = amountToUpdate;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}